学习经历：
css-->js
js-->dom
vue-->Webpack
Webpack-->Taro

技术栈：
React/Vue
Webpack
Babel
Html5
Css3
Typescript
Sass/Less
Git

算法：
动态规划
图论
DFS/BFS
贪心算法
排序
堆
数组/字符串
第一题一般是一道 leetcode 难度 easy/medium 难度的算法题，都是比较常见的吧，一般是链表/数组/字符串
第二、三题一般是结合实际情况的算法题，今年常见的是 DFS 的题型，例如模拟css选择器来找节点，或者求加载依赖的顺序。
最后一题一般是一个代码综合题，一般做不出来的，时间太短了，像什么模拟贪吃蛇啊，或者写一个 React 组件啊之类的


操作题：
实现深拷贝
实现观察者模式/订阅发布
实现下划线形式转换大驼峰（a_bb_ccc -> ABbCcc）
实现排序
实现函数柯里化
实现函数扁平化



优化：
常见的性能优化方式
你如何发现性能不好
如何发现内存泄漏
怎么提高首屏渲染速度
如何优化接口访问
如何实现高帧率动画
性能优化的指标


诱导：
你的项目，难点等
使用 hook 的 useEffect 的 return 方法来取消事件监听
还有哪些内存泄漏的情况，如何解决
如何发现内存泄漏


手撕：
封装ajax
封装bind
封装防抖节流
手写Promise
手写React Hooks
手写Webpack Loader、Plugin
手写MVC、MVVM、React、模块加载器

总结项目难点